package ekaiser.nzlov.plugin.limit;

import java.io.File;
import java.io.UnsupportedEncodingException;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.apache.mina.core.session.IoSession;
import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.dom4j.Element;
import org.dom4j.io.SAXReader;

import ekaiser.nzlov.methodmap.EMethodMapManage;
import ekaiser.nzlov.methodmap.EMethodMessage;
import ekaiser.nzlov.notepad.data.NotepadData;
import ekaiser.nzlov.plugins.EPluginData;
import ekaiser.nzlov.plugins.IEPlugin;

public class LimitPlugin extends IEPlugin{
	private static Logger logger = LogManager.getLogger("LimitPlugin");
	private static final String CONFIG = "config/limit.xml";
	
	private HashMap<String, LimitData> limitMap = null;

	@Override
	public Object start() {
		// TODO Auto-generated method stub
    	logger.entry();
    	limitMap = new HashMap<String,LimitData>();
    	
    	loadLimit(CONFIG);
    	
		EMethodMapManage.addMethodMap("Limit", this);
    	logger.exit();
		return true;
	}

	private void loadLimit(String str){
		try {
			SAXReader saxReader = new SAXReader();
			Document xmlDocument = saxReader.read(new File(str));
			Element root = xmlDocument.getRootElement();
			
			
			List<Element> limits = root.elements("actor"); //解析Plugin标签
			
			String actor = "";
			
			LimitData ld = null;
						
			for(Element l:limits){
				actor = l.elementText("name");
				ld = new LimitData(actor);
				List<Element> plugins = l.elements("method");
				for(Element p:plugins){
					ld.addLimits(p.elementText("name"),Integer.parseInt(p.elementText("limit")));
				}
				limitMap.put(actor, ld);
			}
			
			
		} catch (DocumentException e) {
			// TODO Auto-generated catch block
			logger.catching(e);
		}
	}
	
	@Override
	public Object start(HashMap<String, Object> pa) {
		// TODO Auto-generated method stub
    	logger.entry();
    	logger.exit();
		return null;
	}

	@Override
	public Object stop() {
		// TODO Auto-generated method stub
    	logger.entry();
		EMethodMapManage.removeMethodMap("Limit:isLimit");
    	logger.exit();
		return null;
	}
	
	
	public int isLimit(EMethodMessage msg) throws UnsupportedEncodingException, SQLException{
    	logger.entry();
		
    	IoSession session = (IoSession)msg.getObject();
    	NotepadData data = (NotepadData)msg.getParameter();
    	String actor = (String)session.getAttribute("name");
    	try{
    		LimitData ld = limitMap.get(actor);
    		Integer b  = null;
    		if(ld!=null){
    			b = ld.isLimits(data.getName());
    	    	logger.exit();
    			return b;
    		}else{
	        	logger.exit();
	        	return b;
	    	}
    	}catch(Exception e){
    		logger.catching(e);
    		logger.exit();
    		return 0;
    	}
	}

	@Override
	public EPluginData createReplaceData() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void replaceData(EPluginData arg0) {
		// TODO Auto-generated method stub
		
	}
	 class LimitData {
			private String actor = "";
			private HashMap<String, Integer> limitMap = null;
			LimitData(String id){
				this.actor = id;
				limitMap = new HashMap<String,Integer>();
			}
			
			void addLimits(String str,Integer limit){
				if(str != null && !str.trim().equals("") && limit != null){
					limitMap.put(str,limit);
				}
			}
			
			Integer isLimits(String str){
				if(str != null && !str.trim().equals("")){
					return limitMap.get(str);
				}
				return 0;
			}
		}
}
